//# 16 "C" Standard Extension for Compressed Instructions, Version 2.0
//## 16.2 Compressed Instruction Formats
//Table 16.1: Compressed 16-bit RVC instruction formats.
//### CR : Register

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 5, name: 'rs2' },
  {bits: 5, name: 'rd/rs1' },
  {bits: 4, name: 'funct4' },
  ]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 5, name: 'imm' },
  {bits: 5, name: 'rd/rs1' },
  {bits: 1, name: 'imm' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 5, name: 'rs2' },
  {bits: 6, name: 'imm' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 3, name: 'rdʹ' },
  {bits: 8, name: 'imm' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 3, name: 'rdʹ' },
  {bits: 2, name: 'imm' },
  {bits: 3, name: 'rs1ʹ' },
  {bits: 3, name: 'imm' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 3, name: 'rs2ʹ' },
  {bits: 2, name: 'imm' },
  {bits: 3, name: 'rs1ʹ' },
  {bits: 3, name: 'imm' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 3, name: 'rs2ʹ' },
  {bits: 2, name: 'funct2' },
  {bits: 3, name: 'rdʹ/rs1ʹ' },
  {bits: 6, name: 'funct6' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2, name: 'op' },
  {bits: 5, name: 'offset' },
  {bits: 3, name: 'rdʹ/rs1ʹ' },
  {bits: 3, name: 'offset' },
  {bits: 3, name: 'funct3' },
]}
....

[wavedrom, ,svg]
....
{reg: [
  {bits: 2,  name: 'op' },
  {bits: 11, name: 'jmp trgt' },
  {bits: 3,  name: 'funct3' },
]}
....

//the following configuration broke the build.
//config: {
//  hflip: true,
//  compact: true,
//  bits: 16 * 9, lanes: 9,
//  margin: {right: width / 4},
// label: {right: ['CR : Register', 'CI : Immediate', 'CSS : Stack-relative Store', 'CIW : Wide Immediate', 'CL : Load', 'CS //: Store', 'CA : //Arithmetic', 'CB : Branch/Arithmetic', 'CJ : Jump']}
//}



